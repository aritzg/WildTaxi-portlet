/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.wildtaxi.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.wildtaxi.model.Request;
import net.sareweb.wildtaxi.model.RequestModel;
import net.sareweb.wildtaxi.model.RequestSoap;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the Request service. Represents a row in the &quot;wt_Request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.wildtaxi.model.RequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequestImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a request model instance should use the {@link net.sareweb.wildtaxi.model.Request} interface instead.
 * </p>
 *
 * @author Sareweb
 * @see RequestImpl
 * @see net.sareweb.wildtaxi.model.Request
 * @see net.sareweb.wildtaxi.model.RequestModel
 * @generated
 */
public class RequestModelImpl extends BaseModelImpl<Request>
	implements RequestModel {
	public static final String TABLE_NAME = "wt_Request";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", new Integer(Types.VARCHAR) },
			{ "requestId", new Integer(Types.BIGINT) },
			{ "name", new Integer(Types.VARCHAR) },
			{ "fromLat", new Integer(Types.FLOAT) },
			{ "fromLng", new Integer(Types.FLOAT) },
			{ "fromAddress", new Integer(Types.VARCHAR) },
			{ "toLat", new Integer(Types.FLOAT) },
			{ "toLng", new Integer(Types.FLOAT) },
			{ "toAddress", new Integer(Types.VARCHAR) },
			{ "distance", new Integer(Types.BIGINT) },
			{ "beginDate", new Integer(Types.TIMESTAMP) },
			{ "duration", new Integer(Types.INTEGER) },
			{ "state", new Integer(Types.VARCHAR) },
			{ "companyId", new Integer(Types.BIGINT) },
			{ "userId", new Integer(Types.BIGINT) },
			{ "createDate", new Integer(Types.TIMESTAMP) },
			{ "modifiedDate", new Integer(Types.TIMESTAMP) }
		};
	public static final String TABLE_SQL_CREATE = "create table wt_Request (uuid_ VARCHAR(75) null,requestId LONG not null primary key,name VARCHAR(75) null,fromLat DOUBLE,fromLng DOUBLE,fromAddress VARCHAR(75) null,toLat DOUBLE,toLng DOUBLE,toAddress VARCHAR(75) null,distance LONG,beginDate DATE null,duration INTEGER,state VARCHAR(75) null,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table wt_Request";
	public static final String ORDER_BY_JPQL = " ORDER BY request.beginDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY wt_Request.beginDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.wildtaxi.model.Request"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.wildtaxi.model.Request"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Request toModel(RequestSoap soapModel) {
		Request model = new RequestImpl();

		model.setUuid(soapModel.getUuid());
		model.setRequestId(soapModel.getRequestId());
		model.setName(soapModel.getName());
		model.setFromLat(soapModel.getFromLat());
		model.setFromLng(soapModel.getFromLng());
		model.setFromAddress(soapModel.getFromAddress());
		model.setToLat(soapModel.getToLat());
		model.setToLng(soapModel.getToLng());
		model.setToAddress(soapModel.getToAddress());
		model.setDistance(soapModel.getDistance());
		model.setBeginDate(soapModel.getBeginDate());
		model.setDuration(soapModel.getDuration());
		model.setState(soapModel.getState());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Request> toModels(RequestSoap[] soapModels) {
		List<Request> models = new ArrayList<Request>(soapModels.length);

		for (RequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.wildtaxi.model.Request"));

	public RequestModelImpl() {
	}

	public long getPrimaryKey() {
		return _requestId;
	}

	public void setPrimaryKey(long pk) {
		setRequestId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_requestId);
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		_uuid = uuid;
	}

	public long getRequestId() {
		return _requestId;
	}

	public void setRequestId(long requestId) {
		_requestId = requestId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public float getFromLat() {
		return _fromLat;
	}

	public void setFromLat(float fromLat) {
		_fromLat = fromLat;
	}

	public float getFromLng() {
		return _fromLng;
	}

	public void setFromLng(float fromLng) {
		_fromLng = fromLng;
	}

	public String getFromAddress() {
		if (_fromAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromAddress;
		}
	}

	public void setFromAddress(String fromAddress) {
		_fromAddress = fromAddress;
	}

	public float getToLat() {
		return _toLat;
	}

	public void setToLat(float toLat) {
		_toLat = toLat;
	}

	public float getToLng() {
		return _toLng;
	}

	public void setToLng(float toLng) {
		_toLng = toLng;
	}

	public String getToAddress() {
		if (_toAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _toAddress;
		}
	}

	public void setToAddress(String toAddress) {
		_toAddress = toAddress;
	}

	public long getDistance() {
		return _distance;
	}

	public void setDistance(long distance) {
		_distance = distance;
	}

	public Date getBeginDate() {
		return _beginDate;
	}

	public void setBeginDate(Date beginDate) {
		_beginDate = beginDate;
	}

	public Integer getDuration() {
		return _duration;
	}

	public void setDuration(Integer duration) {
		_duration = duration;
	}

	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	public void setState(String state) {
		_state = state;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public Request toEscapedModel() {
		if (isEscapedModel()) {
			return (Request)this;
		}
		else {
			return (Request)Proxy.newProxyInstance(Request.class.getClassLoader(),
				new Class[] { Request.class }, new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					Request.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		RequestImpl requestImpl = new RequestImpl();

		requestImpl.setUuid(getUuid());

		requestImpl.setRequestId(getRequestId());

		requestImpl.setName(getName());

		requestImpl.setFromLat(getFromLat());

		requestImpl.setFromLng(getFromLng());

		requestImpl.setFromAddress(getFromAddress());

		requestImpl.setToLat(getToLat());

		requestImpl.setToLng(getToLng());

		requestImpl.setToAddress(getToAddress());

		requestImpl.setDistance(getDistance());

		requestImpl.setBeginDate(getBeginDate());

		requestImpl.setDuration(getDuration());

		requestImpl.setState(getState());

		requestImpl.setCompanyId(getCompanyId());

		requestImpl.setUserId(getUserId());

		requestImpl.setCreateDate(getCreateDate());

		requestImpl.setModifiedDate(getModifiedDate());

		return requestImpl;
	}

	public int compareTo(Request request) {
		int value = 0;

		value = DateUtil.compareTo(getBeginDate(), request.getBeginDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Request request = null;

		try {
			request = (Request)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = request.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", requestId=");
		sb.append(getRequestId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", fromLat=");
		sb.append(getFromLat());
		sb.append(", fromLng=");
		sb.append(getFromLng());
		sb.append(", fromAddress=");
		sb.append(getFromAddress());
		sb.append(", toLat=");
		sb.append(getToLat());
		sb.append(", toLng=");
		sb.append(getToLng());
		sb.append(", toAddress=");
		sb.append(getToAddress());
		sb.append(", distance=");
		sb.append(getDistance());
		sb.append(", beginDate=");
		sb.append(getBeginDate());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.wildtaxi.model.Request");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestId</column-name><column-value><![CDATA[");
		sb.append(getRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromLat</column-name><column-value><![CDATA[");
		sb.append(getFromLat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromLng</column-name><column-value><![CDATA[");
		sb.append(getFromLng());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromAddress</column-name><column-value><![CDATA[");
		sb.append(getFromAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toLat</column-name><column-value><![CDATA[");
		sb.append(getToLat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toLng</column-name><column-value><![CDATA[");
		sb.append(getToLng());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toAddress</column-name><column-value><![CDATA[");
		sb.append(getToAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distance</column-name><column-value><![CDATA[");
		sb.append(getDistance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>beginDate</column-name><column-value><![CDATA[");
		sb.append(getBeginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private String _uuid;
	private long _requestId;
	private String _name;
	private float _fromLat;
	private float _fromLng;
	private String _fromAddress;
	private float _toLat;
	private float _toLng;
	private String _toAddress;
	private long _distance;
	private Date _beginDate;
	private Integer _duration;
	private String _state;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private transient ExpandoBridge _expandoBridge;
}